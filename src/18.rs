fn main()
{
    let result = part1(raw_input());
    println!("{}", result);
}

fn part1(raw_input: &'static str) -> i64
{
    raw_input.trim().lines().map(|line| compute(line)).sum()
}

#[derive(Debug)]
enum Token {
    Plus,
    Multiply,
    OpenBrace,
    CloseBrace,
    Digit(i64),
}

fn compute(line: &'static str) -> i64
{
    let mut tokens = vec![];
    const RADIX: u32 = 10;

    for one_char in line.trim().chars() {
        match one_char {
            ' ' => {},
            '+' => tokens.push(Token::Plus),
            '*' => tokens.push(Token::Multiply),
            '(' => tokens.push(Token::OpenBrace),
            ')' => tokens.push(Token::CloseBrace),
            digit => tokens.push(Token::Digit(digit.to_digit(RADIX).unwrap() as i64)),
        }
    }

    let (result, _) = compute_value(&tokens, 0);
    result
}

fn get_value(tokens: &Vec<Token>, index: usize) -> (i64, usize)
{
    match tokens[index] {
        Token::Digit(digit) => (digit, index + 1),
        Token::OpenBrace => compute_value(tokens, index + 1), // return +1 index?
        _ => panic!("Invalid token for get_value"),
    }
}

fn compute_value(tokens: &Vec<Token>, index: usize) -> (i64, usize)
{
    let mut result;

    let (value_a, operator_index) = get_value(tokens, index);

    result = value_a;
    let mut current_index = operator_index;
    
    loop {
        if current_index >= tokens.len() {
            return (result, current_index);
        }
    
        result = match &tokens[current_index] {
            Token::CloseBrace => {
                return (result, current_index + 1);
            },
            Token::Plus => {
                let (value_b, end_index) = get_value(tokens, current_index + 1);
                current_index = end_index;
                result + value_b
            },
            Token::Multiply => {
                let (value_b, end_index) = get_value(tokens, current_index + 1);
                current_index = end_index;
                result * value_b
            },
            token => panic!("Unknown token {:?}", token),
        };
    }
}

#[test]
fn test_part1()
{
    assert_eq!(4, compute("4"));
    assert_eq!(6, compute("4 + 2"));
    assert_eq!(9, compute("4 + 2 + 3"));
    assert_eq!(6 * 3, compute("4 + 2 * 3"));
    assert_eq!(4 * 2 * 3, compute("4 * 2 * 3"));
    assert_eq!(26, compute("2 * 3 + (4 * 5)"));
    assert_eq!(437, compute("5 + (8 * 3 + 9 + 3 * 4 * 3)"));
    assert_eq!(12240, compute("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))"));
    assert_eq!(13632, compute("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"));
}

fn raw_input() -> &'static str
{
    "
    2 * 9 + 5 + ((8 + 6 + 5) * (2 + 3 * 9 + 3) + 5) * (7 + 9 + 7 + 3 * 7) * 5
    7 + (2 + 8 * 8 * 2 + (4 * 3 * 9 + 4 * 4)) + 4 * 3
    6 + 9 * 2 * 2 + (2 + (7 * 6 * 6) + 4 * (7 * 8 * 2 + 4) * 7) + 7
    2 + ((3 * 6 * 5 * 4 + 7 * 7) + 5 * 4 * 5 * (8 * 7 + 9) + 8) * (4 + 6 * 5)
    (7 * 6 * 3 + 4 * 3 * 9) + (6 * 6 * (4 + 6 + 4) + 7 + 2 + (9 * 8 * 9 + 9 * 7 * 4)) + (3 * 4 + 3 + 2) * 8
    (3 + (7 * 7 + 9 * 9 * 6)) * 3 * 5 + 4 * 8
    8 + 9 * (2 + 2 * 5 + 9 * 2) * 2 + ((6 + 4) * 4 + (4 * 7 + 3 * 3 + 7) * (4 * 5 + 8 + 8 + 7 * 6) + (6 + 2) + 5)
    (2 + 2 * 9 * 7) * ((9 + 8) * 3 * 6 + 6 + (5 * 4 * 4 * 3)) + 9 + (3 + 2)
    2 + 7 * 3 + ((7 + 7 * 3) * 6 + 8)
    2 + 7 + 6 + (4 + 7 * 7) + 9 * 2
    (9 * 2 * 4 * 4) + 4
    8 + (8 + 8 + 7) * (5 * 4 + 4 + 5 * 5) * 9 + 8
    (6 * (4 * 2 + 4 + 7 + 4) + 4 * 7 + (7 + 5 + 3 + 3 * 7) * 6) * 6 + 3 + 6 + 5
    5 + ((7 * 3 * 2) + 9 * (9 + 2) * 6)
    (3 * (2 * 2 * 3 * 7 * 2) * 8) * 8
    ((3 + 2) + 5 + 7 + 3 * (8 + 4 + 5 * 8 * 9)) + 7 * 3 * 6
    7 * 6 + 8 * 4 + ((7 + 5 + 2 + 4 * 9 + 9) * 7 + 5)
    6 * (6 * (4 + 8 + 6) * 6)
    4 + 3 + (6 * (2 * 8))
    (2 * 8 * (3 + 8 + 3 + 2) * (8 * 4 + 2 + 8) * 9 + 7) * 8
    4 * (3 + 9) + 9 + 4 + 8 + 4
    ((6 + 3 + 5 + 6 + 6) * 9 * (2 + 7 * 4 * 9 + 3 * 7) + 6) * (3 * 9 + 2 + 7 * 3) * 6
    8 * (5 + 4 * 3) + 3 * 7 + 6 * 4
    4 + 6 + 6 + (4 + 9 + 3 + 3 + 3) + (2 + 6 * 2 + 3 + 4) * (2 * 4 + 9 + 3)
    7 + (3 + 2 * 4 + 4 * 9 + 2) * 2 * ((8 * 6 + 6 * 2 + 7 + 7) + (2 + 8 * 7 + 6 * 9) + 7 * 6) * 7 + 8
    3 * (8 * 7 * (5 + 2 + 8 * 9))
    6 * 9 + 2 + 8 + (4 * 3 * 4 + 6)
    (2 * 6) + 7 * 9 + (3 * 9 + 8 * 4 * 3 * 5) * (9 * 7)
    5 * 2 + (3 + 5 * (5 + 7 + 7 + 4) * 2)
    9 + 4 * (8 + 3 * 2 + 9 * 6 * 4) * 9 * 6
    6 + (6 * (2 * 5 * 4 * 7 * 3) * 9 + 4 + 6 * 3) + 4 * 8
    (6 + (4 * 7) + 6 * 5) + 4 + 7 + 2
    3 + 4 * 9 + 9 * 8 + (3 * 4 + (9 * 6 * 9 * 2) * 5 + 8)
    8 + (3 + (9 * 3) + (6 * 4) + 8 * 6 + 8) + 5
    (7 + 6 * 3) * 2 + 5
    6 + 6 + ((6 + 7) * 9 + 5) * 2
    (3 * 3 * 2 * 5) + 9 * 9 + 3
    (8 * (6 + 2) + 4) * 9
    (4 * 6 * 6 * 3) * 9 * 4 + 4 * 4 * 9
    5 * 5 + ((8 * 9 * 2 + 5) + (3 + 7 * 5 + 2) + 2 + 8 + 5)
    9 + 8 * (6 + 2 * 2) + 7 + 4 * 9
    7 * 8 + (9 + (9 + 4 + 6 * 6 * 9 * 6)) * 8 * 5
    9 * 7 + 8 + 7 * (4 * 2 + (6 + 3 * 4 + 6 * 6 + 6) * 2) + 9
    8 + 2 + (4 * 3) + (2 + 8) * 5 * 7
    2 * 7 * 7 * 8 + (3 * 4 * (7 * 4) + 5 * 8)
    2 * ((6 + 7 + 6 + 2) * 4 + (9 + 4 * 5) + 8 + 6 * 7)
    (6 + 4 * 4 + 9 * (4 + 9 * 5 + 9 + 9 * 9) + 7) * 2
    8 + 9 * (4 + (6 + 4 * 3 * 6 * 6) + 7 + (6 * 2 * 8) + (9 + 5 * 3 + 3 * 3) * 9) * 9 * 4
    (8 + 8 * 9 + 9 + (7 + 8 * 3)) * (6 + 4 * 7)
    2 + (6 * 3 * 5 * 5) + 4 + 9 + (4 + 9 + 9) + 4
    8 + 3 + 8 + (4 + 6 * 6 * 2 * 5) + 5 * 5
    2 * 4 + (7 + 6 + 9 + 5 + 9 + 2)
    (5 * 5 + (5 + 7 + 4 + 3 + 7) * 4) + ((6 * 4) + 2 * (8 + 8 + 4 * 4) * (7 * 7 * 2 + 3) + (8 + 6 + 8 * 2 * 8 + 8)) * 7
    3 * 4 * (7 + 6 * 4 + 6 * 3) * 4 + 4 + ((8 * 6 + 2 + 5 + 7 + 6) + 6)
    9 + (9 * 7 + 2 * 9) + 8 + 6
    4 + 6 + 7 + 6 * 3
    5 * ((4 + 4) + 4 + 7 * 9) * 6
    9 * 6 + 6 + (4 + (5 + 9 + 2 + 9 * 5 + 8) * 4 * 8 * (3 * 4 + 7 * 6 * 3) + 7) * (4 + 4 * (6 + 7 * 6 * 7 * 9)) * 5
    6 + (2 + 4 + 6 + 6 + (8 * 7 * 2 + 6)) + 5 + 9 + 2 + (8 * 7 * (9 + 8 * 6 * 6 * 7 * 3))
    6 + 9 + 7 + 8 + (8 * 6 * (5 + 5 * 7 + 3) * 8 * (4 + 8 * 2 + 9))
    (9 + 3 + 8 + 4 + 8 + 4) * 6 * 3 * 6
    5 * ((5 + 7 + 2 * 3 + 4 + 3) + 3) + 6 + 4
    2 * (8 * 4 + (9 * 3) * (7 + 2 + 3 * 4) * 7) * (6 + 9 + 7) + 5 + 4 + 7
    9 * (9 * (8 * 9 + 5 * 3 * 2) + (9 + 7 + 8 * 8) * (9 * 7 + 6)) * 3 * 3 + 8 * 6
    5 * ((2 + 5) * (8 + 2 * 6 + 6 + 3) + 9 + 3 + 9) * (7 * 4) + (3 * 7 + 8 + 5 + 2 + (7 * 7 + 6)) + 4 * 7
    (2 + 8 + 6 + 6 + 8 + 3) + 5 + (5 + 7 * 8 * 5 + 5 * (2 * 4 * 2 + 2 + 6))
    5 + 6 + (9 * 7 * (6 * 8 * 4 + 7 * 2 * 4) + 3 * 5) + 4 + (2 * 4 * 6 * (9 + 6 + 7))
    5 + 6 * (7 + 5 * (4 * 3 * 9))
    6 * 8 + 4 + (2 + 8 * 6 * 2 + (5 + 9) * 3) + 6
    (7 + 5) * 7 + 5 * (6 + 4 * 9 + 6 * 2)
    9 * (9 + (5 + 9 * 7 + 7 * 2 + 2) * 9 + 8 + 5 * 6) + (5 + 5 * (2 + 4 + 7 + 9 + 6) + 2) * 9 * (3 + 5 + (8 + 2 * 2 + 7 * 7 * 6))
    7 * (7 + 3 * 8 * 9 * 9 + (5 * 2)) + 5
    9 * 9 * (8 + 3 + (2 + 9 + 6 + 6)) * 4 + 2 + (2 + 9 + 6)
    ((9 * 4 * 9 * 3 + 2 * 5) + (7 + 2 * 4 * 3 * 6 * 8) * 7) * 3 * 9
    (3 + (8 + 6 * 6 * 5) + (3 * 5 + 8 * 5) + 7 * (2 + 3 * 7)) + (8 * (6 * 8 * 5 + 8 * 2)) + 8
    4 * 4 + 5 * 8 * (2 * 2 + 8) * 8
    7 * 8 + (5 * 4) * 7 + 2 + 9
    ((4 * 9) * 4 * 8 * (4 * 6 * 5 * 2) * 5 + 9) + 7 * 2 + 8
    ((4 * 3 * 9 + 7 * 7) * (7 + 3 + 7) + 9 + 6 + 8 + (3 + 2 * 6 * 2 * 9)) * 2 + (7 + (9 * 9) + 6) * 3 + 6
    8 + (9 * 8 + (2 + 3 * 3) + 4 + 4 + 4) + 4 * (5 * 4 + 4 * 6) * 7 + 8
    9 + 8 * ((2 * 5 + 7 * 2) + 3 * 4 * 3 * 8 * (2 * 6 + 6 + 3 * 5 + 6)) + (8 + 9 * 8 * 2 * 3 * 9)
    8 + (9 * (8 * 5))
    (5 * 4 * 9 * 3) + 7 + (3 + 7)
    3 * (2 * 8 + 2 * (8 * 3 * 8 + 8)) * 7 + (6 + 7)
    3 + 4
    2 * 8 + ((8 + 9 + 6 * 7 * 4 + 5) + 2 + (5 * 2 + 8)) * 4 + 2
    2 + 5 * 7 * 4 * (3 + 9 * (4 + 5 * 7) + 4) + 5
    5 + 7 * (6 * 9 + 9 + 5 * 3) + 8
    4 + (8 + 6 + 5 + 5 * (2 + 6) * 5)
    5 * 4 + 3 + ((4 * 5 * 7 * 6) + (7 * 7 + 6 + 8 * 9 + 4) + 5 + 2 * 7 * 5)
    9 * (8 + (4 + 9 * 8 + 7 * 3) + 3 * 9) + (7 * 7 + 5 * (5 + 7 + 3 * 9))
    4 * 6 + (2 + 6)
    6 + 2 * 2 + 4
    4 + 9 * 7 * (2 + 5 * 4) * 9
    (2 + 4 * (2 * 9 * 4 * 8 + 5 + 4)) + 4 + (8 * 7) + 7 + (3 + 5 * 7)
    9 * 8 * 8 * (6 + 6 * 2 + 5 * 7 + 3) + 6 + 8
    (3 + 9 + (7 * 2 + 2 + 3 + 2)) + (4 * 6)
    ((6 + 3) + 3 * 8 + 7 * 7 + 8) + (9 + (8 * 6 + 7) + 2 + 5 * 4) + 5 + 3
    8 * ((5 + 2 * 9 + 2 + 7) * 7 * 7 + 7) * 4 + 8 + (4 * (3 * 9 + 3) + (2 * 9 * 4 * 9 * 7 + 6) + 6) * (8 + (2 + 5 * 3 + 8) + 4 + 8)
    5 + 4 + 7 * (4 + (5 * 5 + 3 * 3 + 8 + 7) + 3 + 8 * 6)
    ((9 + 5 * 5 * 6 + 4) + (2 + 2) * 2) * (9 * 9 + 7 * 7 * 6) + 9 + 6 + 2 + (9 * (5 * 9) + 3 * 5 * (5 * 2 * 4 * 7))
    2 * (9 * (5 + 9 * 2 * 9) * 9 + 6) * (2 * 6) * 5 + (3 + 9 + 4 + 6 + (4 * 5 * 7 + 6) + (6 + 7)) * 7
    3 * 8 * 8 * 9 * 2 + 3
    6 * 8 * 6 + (2 + 7) + 5
    (6 * (3 * 4 + 6 + 9) * (2 + 8 + 3 * 8 + 3 * 2)) * 7 * 9 * 7
    8 + (4 + 9 + 2 + 9 * 2 + 9)
    5 + 7 + 6 + ((2 * 2 + 7 + 3 + 9) + 2 + 8) * 7
    (3 * 2) * 2 * 7 * 5
    9 + ((4 * 3 + 3 * 6 * 2 * 9) * 5 * 7 * 3) * 4 * 7 * 2
    (2 * 2 + 9 + 7) + (6 + 4 * 9 * 5) + 6 * 8 * 3 + 8
    8 * 8 + (7 * 9 + 6 * 7 * (2 * 2) * (4 + 2 + 8 * 2 * 3)) + 4
    (3 * (7 * 9 * 6) + 2 + (2 * 6)) * (4 * 3 * 7)
    2 + (2 * (6 + 9 + 9 * 6)) * (7 + 7 * 3 + 8) + 7 + 3
    9 + (5 * 2 + (8 * 4) * 7 * 5) + 9 + 4
    2 + 4 * 4 + 8 * 3 + 5
    8 * 2 * (8 * (7 * 3 * 5 + 7) * 5 + 6 * 4 + 9) * 8 * 2 * 8
    ((7 + 4) + 7 * 3 + 6 * (3 + 6 + 8) * (5 + 4)) * 2 * (7 + (2 + 3 * 5) * 5 + 3 + 6) * ((6 + 3 + 4 + 2 + 3) + 4 * (3 * 7 + 2))
    (2 + (3 * 8 * 2)) + 2 * ((3 + 6 + 3 + 7) * 5 * (9 * 2 + 6 + 7 + 3))
    (6 + (7 * 2 + 4 * 9 + 5 * 2) + 4 + 8 * (4 * 8 * 5 + 7) + 9) * 7 + 2 * 9
    2 + (6 + 4 * 2 + (7 * 2)) * (8 * 6 + 6 * 4 + 5 * (5 * 4 + 9))
    (6 * 3 + (5 * 8 * 4 + 7)) + 7 * 7 + 9 + 9 + 7
    (2 * 9 * 7 * 5 * 7 + 5) * 8 + (8 * (9 + 9 * 8) * 7) * 4 + 5
    6 + (3 + 8 + 4 + 9 * 7)
    4 * 8 + 2
    ((8 * 8 + 4 + 9) + 9 * 7 + 8) * 8 * (5 + 7 * 5) * 2 + ((3 * 2 + 6 + 6 * 3) * 8 + 9 * 9 * (9 * 6)) + (4 * 8 * (5 + 8 * 5 * 8) * 6 * 9 + 8)
    (3 * 6 * 7) * (4 + 8) + 9
    6 * ((9 * 3 * 4 + 9 * 2) + 7 + 2 * 6)
    6 + (7 + 8 + 2 * 5 * 2) * 7 + (5 + 3) * 7
    7 + ((6 * 8 * 6 * 3) * 9 * 3) + 9 + ((3 + 4 * 2 * 6) * 4 * 3) + 5 + 3
    (4 + 3 * (5 * 2 * 2)) + 5
    4 * 3 * (6 * (4 + 3 + 9 * 3)) + (4 * 2 * 5 + (9 * 2) * (6 + 8 + 9 + 6 * 8 + 8) + 2) + 6 + 8
    7 * 5 * 9 + 7 + (5 * (9 + 8 + 3 * 6 * 3)) * ((3 + 5) * (7 + 9 + 3 + 6 * 2) * 3 + 9)
    ((3 + 3 * 9 + 4 * 8 * 2) + 6) + 2 * (5 * (2 * 5 * 7 + 8 + 6) * 2 + 8 + 3 + 6) + (4 + 6 + 4)
    (2 * 8 + 8 + 4 + 3 + 5) + 7
    6 + (6 * 5 * 9 * 6)
    8 + 2 + 6 + 3 + (9 + 6 + (7 * 3) + 5 + 4 + 8)
    6 + 7 * (3 * 7 * 5 + (9 + 6 + 6) * 7) * (3 + 4 + 7 * 4 + 6) * 4 * 4
    9 * 9 * (4 * 4 * (3 * 2 * 2 + 4 + 7 * 3) * 7 * 5 + (7 * 4)) + 5
    9 * ((6 + 3 * 6 + 2) + 4 * (9 * 8 + 8)) + 5 * 6 * 4 + 4
    (8 * 9 + (8 + 5 + 8 + 5 + 3)) + 3 + 6 * 4 * 2 * 4
    8 + (3 * 6 * 7) * 4 * 4 * 3
    (6 * 8 + (2 * 2 + 3 * 8) + 6 * (4 * 9)) * 6 * (2 * 8 + 7 * (8 + 9 + 6 * 9 + 3 + 3))
    3 + 8 * 2 + (8 * 3)
    4 + 3 * 2 * (5 + 3 + 5 + (6 * 5 * 3 * 6 * 6)) + 9 + 7
    (3 + 5 + (3 + 9 + 9 + 7) * 7 * 6) + 7 * 5 * (5 + 3)
    2 + ((7 + 2 + 9 + 2 + 6) * 3 * 2 * 5 * 5 + 2) + 2
    6 * 8 * (2 + 4 * 9 * 5) + 9 + 3
    4 * (6 + 9)
    5 * 2 + 3 * 2 * (5 * 3 * 9 * 7 + (6 + 4 * 5 + 6) * (6 * 2 * 2)) * (9 + 6 + 9 + (8 + 9 + 9))
    5 + (4 * 4 * 5 * (4 * 2 * 4 * 2) * 7) * 2
    3 * 2 + ((4 * 6 * 8) + 9 * (3 * 9 * 8 * 2))
    (3 * 5 + 6 * 8) + 5 + ((2 + 9) + (3 + 4 * 2 * 5 * 3) + 4 + (3 * 7)) * 6
    6 + 3 + 2 + 4 + (6 * 2 + 6 + 4) * 2
    (5 + (5 + 6 + 7 * 2) + 7 + 4 * 5) + 5 * 6 * 9
    4 * 7 * (3 * 2) + 4
    (5 + 4 + (8 + 3 + 7 * 2)) * (6 + (5 + 7 + 3 * 8 + 4) * 5 + 6 * 6 * 5) + 7
    2 * 5 + (5 + 4 + 3) + (9 * 3 + (7 * 6 * 9 * 4 * 3 * 2)) * 3 + 2
    (8 * 2 + 3) + 5 * 2 * 9 + 9 + (3 + 4)
    9 + 6 * ((4 * 7 * 9 * 5 * 4 * 5) + 8 * 8 * 7) * 7
    5 * 4 + ((3 + 2 * 5 * 6 + 7) + 7) + 2
    3 * 9 + 4 * 9
    9 + 7 + (7 + 5 + 3 * (5 + 7 * 8 * 7 + 5 + 7)) + (7 * 6 + 5 * 8) + (8 + (2 + 3 * 3 + 4) + (6 * 9 * 9) * 8) * 6
    8 * (2 * 7 * 3 * 4) + 9 * 3 + 7
    6 + (8 + (7 + 5 * 8 * 5) + 5 * 6 + (8 * 6) + 6) * 3
    7 + 3 * 4 * 6 + 9
    8 + 8 + ((8 * 9 + 6 + 3 * 9) + 3 + 4 * 8)
    9 + 4 + 6 + 3 + 2 + (2 * 6 + 8 + 3)
    (5 * 2) + 4 + 7 * 9 + (5 + 5 + 3 * 5)
    5 * 5 * 2 * 5 + (9 + 7 + 5)
    (2 * 5) + 7
    5 + 7 * 9 + 3 * 5
    (8 * 7 + 9 * 5) + 3 * (6 * 5 + (2 * 7 * 2 * 7 + 7 * 2) + 4) + 3
    (6 + 6 + 6 + 9) + 9 + (3 * 5 + 4 + (6 * 3) * 4) * 3 + (8 + 7 * 5 * (3 * 3) + 6) * 3
    ((2 * 8 * 3 + 2 * 6 * 5) * 5 + (7 * 3 + 5 + 6 * 9 * 4) * (5 * 6 + 8 + 4 * 7 * 5)) + 6 + (9 * (9 + 7 * 8 * 3) + 7 * (5 * 9 + 6 + 5 + 4 + 8) * 8 + 8) * 5
    2 * (5 + 2 * 2 * 3 + (4 + 3)) * (6 + 6 + 2 * 9 + 9 * 3) * 8 * 8
    9 * (9 + 3 + 8 + 5) * (2 * 5 * (6 + 8) * 9) * (4 + 3 * 8 * 9 * 4 + 4) * (3 * 9 * 8 + (6 * 6 + 9 + 5) + 2 * (8 + 2 * 7))
    2 * 5 * 9 * 8 * ((7 * 2 * 3) + 3)
    2 * (6 * 7 * 2 * 4 + (5 * 4 + 7 + 3 + 7) + 5) * (7 + (6 + 3) * (8 + 8) * 3 * (5 + 2)) * 3 * 8 * 7
    2 * 5 * (4 * 9 + 2 + 5 * 2) + 6 * 5 + (6 * 6 * 4 * 8 * 4)
    4 + 8 * 4 + 4 * 3 + (7 + 2 * 2 * 5 * 2 + 8)
    (8 * (4 + 5 + 9 * 9 + 8) * 4 + (8 + 7 + 9 * 4 * 4 + 3)) * 7 * 8 * 3
    8 * 9 + ((2 + 5 + 8 * 9 + 5) + 2) * 7 * 4 + 5
    3 + (5 * 8 * 6 * (7 + 4 * 2 + 2 * 4 * 2) + (9 + 6) * 9) + 4
    9 * 7 + 4 + (7 + 9 + (9 * 9 + 8 * 4 * 5 * 8) + 5) + 3
    2 * 2 + 6 + (3 * 9 + 6 + (4 * 4 * 6 + 2 * 5)) * 5
    6 * 3 * (3 + 8 * 7) + 9
    7 * 2 * 6 * (3 * 3 * 8 * (2 + 7 * 9 + 8))
    9 * 7 + 6 * (7 * (3 + 6 + 7) + 3) + (9 * 6 + (2 + 9 * 3) + (7 * 8 * 8 + 6 * 3 * 5) * 9)
    3 * 4 * 4 * 6 + 2 + (6 * 3)
    4 * (5 + 7) + 8
    5 * 3 * 9 + 9 + 9 * 2
    8 + (8 * 9) * 7 + 6 * 9
    9 + 9 * (3 * 8) * 3 + 2
    6 + (8 + 6 + 2) * (9 * 9 * 8)
    5 + 4 * 3 + (2 * 2 * (2 + 3 + 4 + 7 * 3) + 5 + 3) + 6
    9 * 2 + 3 * 8 * 9
    5 * 2 * 7 * ((5 + 6 * 4 + 6 + 3 + 5) * 7 + 9 + 4) * (7 + 3 * 7)
    2 + ((5 + 3 * 4 + 2) * 2 * 6 + (8 * 8 + 8) * 3 * (3 * 8 * 5 * 6 + 5))
    5 + (6 + 9 + 4 + (3 * 7)) * (4 + 6 * 5 * (7 + 8 * 3 + 3 * 9) + (9 + 8 + 3))
    4 * 2 + 9 + (9 * 6 * 9 * (9 * 4 + 3 * 2 * 6 + 8) + 7 + 9) * (5 + 7 * 9 * 5) + (8 + 9 + 4 * 5 * 8)
    7 + 8 * 3 + (5 + 2 * 2 + 6 * 8) + 7
    8 + ((9 * 7 + 5 * 8 + 3 + 6) * 4) + 6 * 4 + 4 + 3
    (6 + 2 + 4 + 7) * (2 + 6 * 7 * (4 * 3 + 9 + 5 * 5) + 5 + (2 + 3 * 5 * 5 * 6)) * 2
    (6 + 9) + 4 * 9
    4 * (4 * 5 + 9 * (9 + 5 * 7 * 6 * 7 + 9))
    2 * 5 + ((7 + 3 * 3 * 9 + 8 + 4) * 4 * 6) + 3 + 6 + (4 + (2 * 7) + 5)
    (7 + (4 * 5 + 2 + 2 * 2 + 8)) * 5 + 5 + (3 + 8 + 6 * 6) * 9
    5 + 4 + 4 + 7 * (2 + 6 + (3 + 6 + 7) + 6 * 9) * (2 + 8)
    8 + ((4 * 3 * 2) + 4) + 5 * 7 * 3 * 5
    4 * 4 + 9 + (8 + (6 * 5 * 2 + 8 * 3 + 8) + 4 * (2 + 6 * 2 + 4 + 3 + 2) * (4 + 5))
    (9 + 8 * 8 + (5 * 8 * 7 * 8 + 9 * 6)) * 9 + 5 * 2
    7 + 8 * (2 + (5 + 7 + 3 + 9 * 8 + 8) * (2 * 9 * 7) + 3 + 4) * 8 + 5 + 2
    5 + 2 * (5 * 7 * 6 * 4 * 2 + (7 + 2 + 7 + 9 + 4))
    6 * 8 * 7 * 8 * 9 + 9
    5 + 8 + 7 * 5 * (8 * 8 * 5 + 7 + 9) + 6
    9 + 2 * 3 * 5
    8 * 5 + (2 + (4 + 9 + 5 * 6 + 8) + 9 * (4 + 4 * 5 * 3) * (5 * 7 * 8 + 3 * 3 + 3) + 5)
    7 + 3 + (2 * 2 + 5 * 8 + 3) + (8 + 3 + (6 * 5 + 4 * 5))
    6 * ((2 * 6 + 6 * 2 + 5 + 4) * 8 + 8 * 9) * (5 * 2 + 4 + 6 * 3) + ((6 + 8 + 8 + 6 + 7 * 6) + 8 * 9 * 2 * 2 * (8 + 3 + 7 * 5 * 3)) * ((5 + 9) * 4) + 4
    (3 * 8 * 5) + 8 + (3 + 7 + 2 * 3 * 8) * 5
    7 + 3 * 9 + (2 * (2 + 9 + 9 + 8 + 9) * (8 * 6)) * 4 * 9
    7 + 9 + (3 + 7 + 2 + 6)
    4 * (6 + (3 + 6 + 3) * (9 * 7 * 4 + 3 + 4) + 8 * 7 + 4)
    ((9 + 6) * 3 + 2 * 5) + (6 * 5 + 4 + 3)
    3 + (4 * (2 + 4 + 4 + 2)) * 4 * 7 + 5 + 5
    (5 * 9 * 2 * (7 * 9 * 8) + 2) + 6 + 2 + 8 + 9
    5 + 4 * 4 + (2 * 3 + 8 + 8) * 6 * (9 * 8 + (8 * 9 * 5) + 9)
    3 * 5 * (8 + 3 + 7) + 4 + 6
    6 + 7 * (9 + (2 + 7 + 2 * 2)) * 3
    (9 * (4 * 3)) + 9 * 4 + (9 * 5 + 5 * (6 * 2 + 8 * 8) + 2) + 9 + 8
    6 * 7 + 7
    7 + (9 * 6 * 8 + 9 * 2) * 4 * (9 * 4 * 6 + (8 * 5 * 8)) * 7
    8 + 5 + ((8 + 2 * 6) + (9 * 3 * 8)) + 7
    4 * 8 * (6 + (4 + 5) + 5 * 3)
    (3 * 2 + 6) + 3 + 3 + 8 * 6 * 7
    9 * 3 * 3 + (4 * (6 + 3) * 4) + 2 * 9
    5 + 9 + 7 + 4 * (9 * 3)
    ((8 * 9) + (7 + 5 + 6) + 3 * (5 + 7 + 6)) + 5 + (3 * 8 * 3) * 2
    9 + 6 * 5 * ((4 * 4) + 7 * 3) + (3 * 6)
    7 + (8 + 7) + 4 * (3 + 3) * 7 * 9
    ((6 + 7 + 4 + 7) * 7 + 9 + (9 * 7 + 5 + 7 + 7) + 9 + (7 + 3 + 2 * 6 + 9)) + 2 + (4 * 7 + 9 * 3 * 2 * (5 + 9 + 3)) * 5
    9 * (3 + (9 * 9)) + 9 * 8 + 4 * 2
    (8 * 8 + 6 + 9 + 8 + 2) + 6 * 5 + 5 * 4
    3 + 3 + 4 * (6 * 6) + 2 * 8
    (5 * 9) * (8 * (2 + 6 * 9) * 7 + 7)
    8 * 5 + (8 + 8 + 8 * 4) + 3 * 8 * (8 + 6 * 3 + 4)
    4 * 9 + (5 * (8 * 3) + 4) * 5 + (3 * 3)
    (2 + 2 * 4 * 3) + 8 * ((2 * 6 + 5 + 6 * 2) * 3) + 2
    ((5 * 4 + 2 + 7 * 6) + (7 * 5 + 4) + 9 + 7 + 7) + 3
    2 + 3 + 9 * 9 + (9 * (2 + 8 + 7) * 3)
    3 * 7
    (4 + 2 * 5) + 2
    5 * 5 * (5 + (8 + 8 + 8) + 3 * 2 * 4) * 9 * 2 + 8
    4 + 5 * 3 * 5 + (4 + (3 + 8 + 4) + 7) + 7
    (4 + 7 + 6 + 2 * 7) + 7
    4 * 2 * 4
    (4 * 4 + (6 * 6 * 7 * 2) * 4 * 6 * 7) * ((9 + 5 + 9) + 8) * (5 + 8 + 2 + (9 + 8 * 2 + 9 * 8) * 8 + 3) * 6
    5 + 8 * 9 + ((7 * 9 * 3 * 7) * 2 + (2 + 2 + 3 * 6 + 6) + 5 + 4)
    3 * 8 + 2 + (7 + 8 + (8 + 7 + 7 * 6 + 2) + (3 + 2) + 5)
    4 + 4 * 6 * 5
    4 * 9 * ((9 + 2) + 4 + 2 * 5) * ((6 * 9 * 5 + 8) * (7 + 7)) * (8 * 7 + 9 + 7 * (2 + 9 + 9 + 4 + 8) + 9) * 6
    (8 * (2 + 3 + 7 * 3 + 2) * 2 * 4 + 7) + 4 + 3 * 2
    (6 + (2 * 5 + 3 * 2 * 4 * 7)) * 6 + 4 + 6 + 9 + 9
    (8 + 8 * 6 * (4 + 3 + 4 + 8 * 2 * 4) + 7) + 2
    8 + 9
    8 + 8 * 4 + 4 * ((9 * 2) + 2)
    (3 + 3 + 9 * 9 + 5 * 2) + 5 + 7
    2 + (7 * 5 * 2)
    8 + (5 + 3 + 8 * (3 + 2) * 6) + 9 * 9 * 8 * 9
    8 + (2 * 5 + (9 * 7 * 4 * 2) * (7 * 4) * 4 * 6) * 9 + 3
    4 * 7 + 4 * 4 * (2 + (2 * 8 + 2 * 5 + 2) * 7)
    8 * 5 + 8 + (6 * 9 * 8 * 2 + 5 + (4 * 5 + 4 + 3 + 3)) + 4
    9 + 9 * 2 * 9 + (5 + 2 + 6 + 3 * (5 * 2 + 8 * 9 + 6 + 7))
    4 * 9 + 2
    4 + 4 * (3 + (4 + 9 * 8 * 7 * 3 * 3) * 2 + 9) + (2 * 7) + 8
    ((5 + 8 + 5 * 2 * 5 * 3) * 5 * 6 + 2) + (5 * 9 * 6 + 2 * (4 + 8 + 9 * 9 * 8 * 3) * 2) + (8 * 6 + 2)
    3 + 7 + (9 * (2 * 6 + 3) + 4) * (3 + 4 * 8)
    ((2 * 2 + 5 * 6 + 7 * 2) * 5 + 9 + 6) * 5
    (8 * 6 * (3 + 8) + 9 + 7 * 5) * 3 * 2 * 3 * 5 * 5
    ((2 + 9 * 4 + 8) * (5 + 5 + 6) * 6 + 9 * 8 + (6 + 9)) * (9 + 8) * 6 * 6 + 9 + 7
    (6 * 5 * 6 * 5 * 3) * 6 * 9 * 9
    (5 * 4 * (5 * 3 * 3) * (5 + 6 + 2 + 2 * 9 * 3)) + (3 + 6 * 3 * 3 + 3 * (8 * 5 + 3)) * (9 + 3 * 9) + (7 + 4 + 3 * 8 * 8)
    (4 + (9 + 2 * 3 + 9 + 6) + 2) + 2 * 7 * 5
    9 + 8 + (3 + (7 * 7 + 2 * 8 + 6 * 2) * 8 * 6 * (9 + 7 + 4))
    (7 + 3) * 7 * (4 + 4 * (2 + 3 + 4 + 6) + 7) + 6 + 2
    (8 * (5 * 9 * 6) * 3 * (7 * 5)) + 5 + 3
    (2 * 6 + (7 + 5) * 7 + 3) * 5 + 3 * 2
    ((9 + 4) * 6 * 2 * 3 + 6) * ((2 + 6 + 4 * 7 + 4 * 7) * (7 + 9 + 2) * 2) + 7 * 2
    3 * (9 + 9 + 5 + (9 + 7 * 7 + 8 + 2 + 6) + (9 * 8 + 8 * 8 * 7) * 3) + (7 + 9 * 4 + (6 + 4) + 2) + 9
    9 + (2 * 5 + 9) + 9 + 7
    3 * 9 + ((2 + 4 * 4) * 3 + 5 * 3 * 5 + (4 + 8 * 3 * 4)) + 6 * 5
    3 + (7 * 2 + (4 + 6 * 6)) * 2 + (4 * 5 + 2 + 6 + (7 * 6 + 6 + 7)) * 6 + 9
    6 + 5 * (3 + 5 + 2 + (9 + 6 * 3) + 3 + 7) * 3
    4 * ((4 + 4 * 8 + 7 + 2 + 4) * (4 + 4 + 8 * 4 + 4 + 3) + 9 * (6 * 4 * 9 * 9) * 2 * (6 + 6 * 9 * 3 + 4)) + 7
    9 + 8
    7 + (9 + (5 * 6 * 5 * 3 * 3))
    7 * 9 + 4 + 6 + ((9 * 2 + 9) * 7 * 9) + 6
    ((8 + 7 * 8 * 6 * 9 + 2) + 4 + 6 * 9 * (5 * 6 * 9 * 8) * 7) * 5 + 5
    2 + 2 * (4 + 3 + 6 + 4 + 5) * (7 * 5 * 5 * 6 + 4 + (6 * 8 * 4 + 7))
    (3 + (9 + 2 * 3)) + 2 * 7
    (5 + 8 * 5 * (9 * 6 + 4 * 6 + 5)) + 5 * ((3 * 9 + 7) + 9 + (2 * 6 * 4 * 3 + 4 * 4) + 7 + (5 * 4 * 9 + 9 * 7) * 5)
    ((7 + 2 * 5 * 3) + 4) * 8
    6 * (3 + 7 * (2 + 6) + 6 + (9 * 8 * 7) * (5 * 4 + 7 + 8 * 8)) + 6 * 6
    (6 + 9 * (2 + 2 * 2 * 3 * 7 + 8) * 3 * 5 * 4) + 2
    5 + 2 + (9 + 4 * 7 + 3 + 8) * (4 + 8 * (3 + 2 * 7 * 4)) + 8 + (4 + 5)
    (8 * 9 + 9 + 4 * 5) + 2 * 2 * 9 + (3 + 9) + 5
    4 * 7 + ((5 + 7) * 3) * 9 * 9
    6 + 6 * 4 * ((8 + 9 * 7 * 3 + 9 * 8) + 4) * 3 * 4
    4 * (6 * (9 * 9 + 4 * 2 * 3) * 2) + 8 * 5 * 3
    7 + 4 * (8 * 2 * 2 * 3 * 8 * 8) * 7 + 2 + 5
    8 * ((2 * 3 * 5 * 9 * 2 + 6) * 4 * (7 + 3 * 4 + 7 * 5 + 5) * 3) * 7 + ((9 + 8 + 5) * 8 * (5 * 8 * 9 + 3 + 9) * 5)
    5 * (7 + 2 + 9) + 9 * (5 + 8) + 3 * 6
    6 * ((9 * 5 + 7) * (8 + 9 + 9 * 7 + 3 + 4))
    ((7 + 2 * 6 * 5) * 7 + 2) * 8 * 7
    9 + ((7 + 8 * 9 * 4 * 4 + 6) + 8) * (9 + (7 + 2 + 6 * 3))
    (3 + 6 * (6 * 9 * 4)) + 6 + 5 * 9 + (4 * 6 * 8) * ((7 + 2 * 9 * 4 + 4) + 9 + (6 + 2) + 5)
    2 + 4 + 6 + 2 * ((8 * 3 * 2 + 7 * 6 + 3) + 4 + 5 + 5 * 5)
    6 + ((6 * 5 * 3 + 9) + (7 + 7 * 8 + 9 * 7 + 6))
    (9 + 3 * 3 + (6 * 4 * 2 * 9 + 7 + 4) * 2) * 9 * 2
    4 * ((8 + 4) * 2) * (7 + 6 + 3)
    9 * 2 + (9 + (7 * 4) * 9 + 8 + (4 + 4) + 7) + (6 * 6 * 3 * 3) * ((9 * 4) * 5 * (6 + 3 + 8) + 5 * 7) + 2
    5 + ((9 + 3 + 4 + 2) + (5 + 3) + (4 * 2)) * 7
    (8 * 7) + 9 + 6 + 7 * 9 * ((5 + 8 + 5 * 5 + 7 + 2) * 2 + 6)
    (9 * 3 * 6) * 4 + 5 * 4 * 3
    5 * ((7 + 4 * 5 + 8) + 2) * 9 + 3
    2 * 2 + ((2 * 2) * (7 * 5 * 6 + 9)) * 2
    4 + ((5 * 5 + 2 + 2) * 3 * 6 + (4 * 3 * 3 + 4 + 7)) * 3 + 3 + (4 + (6 + 9) + 4 + 6 * (2 * 3) * (5 + 8 * 2 * 8)) + 9
    2 * 9 + 5
    2 + ((6 + 7 + 9) * 9 + 9) + 9 * 5
    2 + 7 * (9 * 7 + (6 + 5 + 2)) + 8 + 5
    3 * (7 * 4 + 8 * 8 * 6 * 8) + 5 + 2
    8 + (5 * 2 * 3 + 5 + 8 * 3) * 3 * (9 * (2 + 8) * (7 + 3 + 5 + 4 * 9) * 6 + 5 + (8 + 9)) + 4 + 3
    4 + 7 * ((8 * 5 * 2) + 3) + 2
    4 + 6
    (5 * (7 * 6 + 3 + 4) + 9 + (8 + 9) + (5 * 6) * 4) * 8
    6 + ((7 + 5 + 7 * 3 + 8 + 3) * 5 * 2 * 4 + 5 + 4)
    5 + 4 + ((6 + 6 + 5 + 7 * 8) * (2 + 4 * 3 * 8 + 3) + (4 + 3) + 2) + 9
    7 * 3 + 6 + 6 * 4 * 6
    (4 * 9 + 2 + 4 + 9) * 6 + 6 * (4 * 9 * (6 * 9 * 3 * 6 * 2 * 7) + 5 + 3 * 3) + 3 * 8
    (5 + (4 * 8) + (5 * 5)) + (2 + 5 * 8)
    9 + 3 * 3 * 8 + (3 + 4 * 2 + (6 * 7 * 2 + 4 + 6 * 9) * 4) * 3
    3 * 6 + 2 + (8 * 6 * 6 + 8 + 8) * ((7 + 3 * 4 * 5) * 4 + 9 * (7 + 4 + 5 * 9 + 8 + 3) * (7 * 8 * 5 + 5 + 7 + 6)) + 4
    6 + 4 + (5 + 7 * 6)
    5 + 3 * 8 + 6 + 3
    6 + 2 + 9 + 8 + (7 + (8 + 2 * 8 + 3 + 8) * 8) * (8 * 8 * (7 + 9 * 2 + 7 * 4) * 4 + (7 + 6 + 7 * 4 + 5))
    3 + 8 + 4 + (8 + 7) * ((7 + 5) + 8 + 4 + (9 * 7 * 8 * 6) + (7 + 6 + 8 * 3)) + 5
    4 + 2 + 6 * (8 + 2 * 2 * 7) * 2 * 8
    2 + 6 * 4 + 6 + (8 + 4 + 6 * 8 + (6 + 4 * 9 * 8 * 3 + 6) * (3 * 5 * 2 + 2 + 7 * 2)) * 3
    6 + 6 * 4 + ((9 * 8 * 5) * 4 * 9 * (2 + 9 * 4 + 8 * 8) * 7)
    3 * 3 + (2 + 9 * 6 + 3) * ((3 + 2 * 2 + 8 * 8 * 3) + 8 * 9) * 4 + 9
    (2 * 7 + 2 * 2) * 8 + 6
    5 + (3 + 9 + 3 + 9 * 4 + 6) + 3 * 7 * 5 * 5
    ((9 + 7 * 4 * 5 + 6 * 8) + 5 * 3 * (2 * 7 + 3 + 5 * 4 + 9)) * 5 * 8
    7 + 2 + (5 + (8 + 2 * 2 * 9 + 6) * 4 + 2 * 5) * 3 + 5
    7 + (8 + 6 * (9 + 6 * 3 * 9 * 8 + 7))
    7 + 2 + 7 * (9 + 4 + 3 * 3 + 9)
    7 + ((5 + 7 * 4 * 3) + 4 * (9 * 5 + 2 * 5 * 6 + 2)) * 3 * ((3 + 3 + 4 + 8) * (4 * 5 * 7 * 4 + 9) + 8 + 3) * 7
    (3 * 9 * 8 + 8 + (5 * 3 + 6 * 3 + 2) + (8 + 9 + 3)) * 5 * 4 * 4 * 3
    9 * 6 + (9 * 6 + 3 * (7 * 4 * 2 + 9) + 3)
    (3 + 6 * (6 * 5 * 8 * 9) + (7 + 5 * 5 + 5 + 8 * 8)) * 6 + (9 + 8 + 7 * 5 + (8 + 3 * 4 + 8 * 9) * 7) * 8 + 6
    (9 * 7 + (4 * 8 + 9 + 6) * 3 * 7 * (9 * 7)) + (5 * 9 * (3 * 4 * 7 + 6) * (8 * 9 + 5 + 2 + 9))
    5 * (8 * 3) + 9 * ((8 * 3 * 4) * (6 * 2) * 3 + 6 * 6 * 8) * ((2 * 3 * 6 + 4 * 2 + 5) * 8 * 6 * 2)
    3 + (4 * (6 + 5 * 3 + 9 + 3) * 2 * (8 + 7 * 8 * 7 + 5) * (8 + 8)) + (8 * 5 + 8 + 6 * 9 * 4) + 8 * 4 + 3
    (3 * 6 * 7 * (3 + 7 * 4) * 8 * 8) * 5 + 6 * 6 + (4 * (9 + 5 * 8 * 9 * 6 * 6) * 3) + ((7 * 8 * 6 + 2 + 5 * 6) * 2 + 3 + 5 * (3 * 8) + 6)
    (2 + 4 * 9) + (7 + 2 + 7 * 7 * (3 + 8 * 4 + 2) * (7 + 5)) * 9 * 7
    4 + (8 + 2 + 5 + 2 + 9 + 4) + 7 + 6 * 4
    3 * 8 + (8 + 5) * (7 + 5 + 6)
    5 + (5 + (7 + 5)) * 8 * 6 * ((9 + 3 * 2 * 5 + 2 + 9) * 2 + 5 + 3 * 6) * ((2 + 2 * 9) * 6 * 8 * 7 * (4 * 5) * 6)
    7 + 3 * 6 + ((5 + 2 + 6 + 5 + 5 * 4) * 4 * 9)
    5 * 4 + 8 * 3
    (8 + 6 * 6 + 5) + 9 + (6 + 3) + 7 + 6
    "
}